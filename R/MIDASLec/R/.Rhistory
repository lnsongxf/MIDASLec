caviar.obj(beta.hat,r,empiricalQuantile,q.level,2)
tmp <- caviar.obj(coeff.CAViaR,r,empiricalQuantile,q.level,2)
coeff.CAViaR <- as.numeric(temp[[1]][1:dim(initialTargetVectors)[2]])
rq.val.CAViaR <- as.numeric(temp[[1]][4])
tmp <- caviar.obj(coeff.CAViaR,r,empiricalQuantile,q.level,2)
tmp
tmp$VaR
cond.quant.CAViaR <- tmp$VaR
caviar.optimization <- function(r,q.level,empiricalQuantile,nInitialCond=10,nInitVec=1000,is.plot=FALSE){
RQfval <- matrix(NA,nrow=nInitVec,ncol=1)
initialTargetVectors <- matrix(runif(nInitVec*3,min=0,max=1),nrow=nInitVec,ncol=3)
for i = 1:nInitVec
RQfval(i) = RegressionQuantileObj('C', model, ...
initialTargetVectors(i, :), theta, r, ...
empiricalQuantile, [], [], 'RQ');
end
for (i in 1:nInitVec){
RQfval[i,] <- caviar.obj(initialTargetVectors[i, ], r, empiricalQuantile, q.level, 1)
}
Results          <- cbind(RQfval, initialTargetVectors)
SortedResults    <- Results[order(Results[,1]),] # sort the results
BestInitialCond  <- SortedResults[1:nInitialCond,-1] # keep the top nInitialCond
est <- NULL
for (dt in 1:nInitialCond){
est[[dt]] <-  suppressWarnings(optimx::optimx(BestInitialCond[dt,],caviar.obj,r=r,empiricalQuantile=empiricalQuantile,q.level=q.level,out=1,method=c("Nelder-Mead")))
}
val <- NULL
for(j in 1:length(est)){val[j] <- est[[j]]$value }
temp <- est[which.min(val)] cond.quant.MIDAS
coeff.CAViaR <- as.numeric(temp[[1]][1:dim(initialTargetVectors)[2]])
rq.val.CAViaR <- as.numeric(temp[[1]][4])
tmp <- caviar.obj(coeff.CAViaR,r,empiricalQuantile,q.level,2)
cond.quant.CAViaR <- tmp$VaR
if (is.plot){
plot(date,y,type='l',main=paste0("Conditional quantile(s) estimated at the quantile level: (", q.level, ")"), xlab='Months',ylab='')
lines(date,cond.quant.MIDAS,type='l',col="red")
}
return(list(coeff.CAViaR=coeff.CAViaR,rq.val.CAViaR=rq.val.CAViaR,cond.quant.CAViaR=cond.quant.CAViaR))
}
caviar.obj <- function(beta,r,empiricalQuantile,q.level,out){
# get VaR:
VaR <- EvaluateVaR(beta,r,empiricalQuantile)
# compute hit stat:
Hit <- as.numeric(r < VaR) - q.level
# compute regression quantile loss:
RQ  <- - sum(Hit*(r - VaR))
if ((RQ == Inf) || (RQ != RQ)){
RQ <- 1e+100
}
if (out == 1){
res <- RQ
} else if (out==2){
res <- list(VaR=VaR,Hit=Hit)
}
return(res)
}
EvaluateVaR <- function(beta,r,empiricalQuantile){
lVaR <- length(r)
VaR <- matrix(NA,nrow=lVaR,ncol=1)
VaR[1,] <- empiricalQuantile
# SAV CAViaR specifaction:
for (i in 2:lVaR){
VaR[i,] <- beta[1] + beta[2] * VaR[i - 1, ] + beta[3] * abs(r[i - 1])
}
return(as.vector(VaR))
}
caviar.optimization <- function(r,q.level,empiricalQuantile,nInitialCond=10,nInitVec=1000,is.plot=FALSE){
RQfval <- matrix(NA,nrow=nInitVec,ncol=1)
initialTargetVectors <- matrix(runif(nInitVec*3,min=0,max=1),nrow=nInitVec,ncol=3)
for (i in 1:nInitVec){
RQfval[i,] <- caviar.obj(initialTargetVectors[i, ], r, empiricalQuantile, q.level, 1)
}
Results          <- cbind(RQfval, initialTargetVectors)
SortedResults    <- Results[order(Results[,1]),] # sort the results
BestInitialCond  <- SortedResults[1:nInitialCond,-1] # keep the top nInitialCond
est <- NULL
for (dt in 1:nInitialCond){
est[[dt]] <-  suppressWarnings(optimx::optimx(BestInitialCond[dt,],caviar.obj,r=r,empiricalQuantile=empiricalQuantile,q.level=q.level,out=1,method=c("Nelder-Mead")))
}
val <- NULL
for(j in 1:length(est)){val[j] <- est[[j]]$value }
temp <- est[which.min(val)] cond.quant.MIDAS
coeff.CAViaR <- as.numeric(temp[[1]][1:dim(initialTargetVectors)[2]])
rq.val.CAViaR <- as.numeric(temp[[1]][4])
tmp <- caviar.obj(coeff.CAViaR,r,empiricalQuantile,q.level,2)
cond.quant.CAViaR <- tmp$VaR
if (is.plot){
plot(date,y,type='l',main=paste0("Conditional quantile(s) estimated at the quantile level: (", q.level, ")"), xlab='Months',ylab='')
lines(date,cond.quant.MIDAS,type='l',col="red")
}
return(list(coeff.CAViaR=coeff.CAViaR,rq.val.CAViaR=rq.val.CAViaR,cond.quant.CAViaR=cond.quant.CAViaR))
}
caviar.obj <- function(beta,r,empiricalQuantile,q.level,out){
# get VaR:
VaR <- EvaluateVaR(beta,r,empiricalQuantile)
# compute hit stat:
Hit <- as.numeric(r < VaR) - q.level
# compute regression quantile loss:
RQ  <- - sum(Hit*(r - VaR))
if ((RQ == Inf) || (RQ != RQ)){
RQ <- 1e+100
}
if (out == 1){
res <- RQ
} else if (out==2){
res <- list(VaR=VaR,Hit=Hit)
}
return(res)
}
EvaluateVaR <- function(beta,r,empiricalQuantile){
lVaR <- length(r)
VaR <- matrix(NA,nrow=lVaR,ncol=1)
VaR[1,] <- empiricalQuantile
# SAV CAViaR specifaction:
for (i in 2:lVaR){
VaR[i,] <- beta[1] + beta[2] * VaR[i - 1, ] + beta[3] * abs(r[i - 1])
}
return(as.vector(VaR))
}
#TODO: --- estimate CAViAR on monthly data --- #
empiricalQuantile <- un.quant[41]
empiricalQuantile
un.quant
est.midas.0.25 <- midas.optimization.rq(snp500[,2],snp500[,1],optionsmidas,"betaconstr",q.level=0.25,nInitialCond=10,is.plot=TRUE)
est.midas.0.05 <- midas.optimization.rq(snp500[,2],snp500[,1],optionsmidas,"betaconstr",q.level=0.05,nInitialCond=10,is.plot=TRUE)
# ---
est.midas.0.05
est.midas.0.05$coeff.MIDAS
est.midas.0.25$coeff.MIDAS
# Chapter 4. MIDAS quantile
# --- preliminaries --- #
rm(list=ls())
require("MIDASLec")
# --- MIDAS quantile regressions --- #
# --- load data --- #
data("example4")
# --- options --- #
optionsmidas <- list(aggrY = 22, aggrX = 22) # forecast horizon, no. of lags of daily returns
# --- compute log returns --- #
snp500[-1, 2] <- log(snp500[-1, 2]/snp500[-dim(snp500)[1], 2])
snp500 <- snp500[-1,]
# --- estimate MIDAS quantile regression with beta (restricted) and plot quantiles --- #
est.midas.0.25 <- midas.optimization.rq(snp500[,2],snp500[,1],optionsmidas,"betaconstr",q.level=0.25,nInitialCond=5,is.plot=TRUE)
est.midas.0.05 <- midas.optimization.rq(snp500[,2],snp500[,1],optionsmidas,"betaconstr",q.level=0.05,nInitialCond=5,is.plot=TRUE)
est.midas.0.25
est.midas.0.25$coeff.MIDAS
est.midas.0.05
est.midas.0.05$coeff.MIDAS
est.midas.0.25$coeff.MIDAS
est.midas.0.25
est.midas.0.25$coeff.MIDAS
est.midas.0.05$coeff.MIDAS
caviar.optimization <- function(r,q.level,empiricalQuantile,nInitialCond=10,nInitVec=1000,is.plot=FALSE){
RQfval <- matrix(NA,nrow=nInitVec,ncol=1)
initialTargetVectors <- matrix(runif(nInitVec*3,min=0,max=1),nrow=nInitVec,ncol=3)
for (i in 1:nInitVec){
RQfval[i,] <- caviar.obj(initialTargetVectors[i, ], r, empiricalQuantile, q.level, 1)
}
Results          <- cbind(RQfval, initialTargetVectors)
SortedResults    <- Results[order(Results[,1]),] # sort the results
BestInitialCond  <- SortedResults[1:nInitialCond,-1] # keep the top nInitialCond
est <- NULL
for (dt in 1:nInitialCond){
est[[dt]] <-  suppressWarnings(optimx::optimx(BestInitialCond[dt,],caviar.obj,r=r,empiricalQuantile=empiricalQuantile,q.level=q.level,out=1,method=c("Nelder-Mead")))
}
val <- NULL
for(j in 1:length(est)){val[j] <- est[[j]]$value }
temp <- est[which.min(val)] cond.quant.MIDAS
coeff.CAViaR <- as.numeric(temp[[1]][1:dim(initialTargetVectors)[2]])
rq.val.CAViaR <- as.numeric(temp[[1]][4])
tmp <- caviar.obj(coeff.CAViaR,r,empiricalQuantile,q.level,2)
cond.quant.CAViaR <- tmp$VaR
if (is.plot){
plot(date,y,type='l',main=paste0("Conditional quantile(s) estimated at the quantile level: (", q.level, ")"), xlab='Months',ylab='')
lines(date,cond.quant.MIDAS,type='l',col="red")
}
return(list(coeff.CAViaR=coeff.CAViaR,rq.val.CAViaR=rq.val.CAViaR,cond.quant.CAViaR=cond.quant.CAViaR))
}
caviar.obj <- function(beta,r,empiricalQuantile,q.level,out){
# get VaR:
VaR <- EvaluateVaR(beta,r,empiricalQuantile)
# compute hit stat:
Hit <- as.numeric(r < VaR) - q.level
# compute regression quantile loss:
RQ  <- - sum(Hit*(r - VaR))
if ((RQ == Inf) || (RQ != RQ)){
RQ <- 1e+100
}
if (out == 1){
res <- RQ
} else if (out==2){
res <- list(VaR=VaR,Hit=Hit)
}
return(res)
}
EvaluateVaR <- function(beta,r,empiricalQuantile){
lVaR <- length(r)
VaR <- matrix(NA,nrow=lVaR,ncol=1)
VaR[1,] <- empiricalQuantile
# SAV CAViaR specification:
for (i in 2:lVaR){
VaR[i,] <- beta[1] + beta[2] * VaR[i - 1, ] + beta[3] * abs(r[i - 1])
}
return(as.vector(VaR))
}
caviar.optimization <- function(r,q.level,empiricalQuantile,nInitialCond=10,nInitVec=1000,is.plot=FALSE){
RQfval <- matrix(NA,nrow=nInitVec,ncol=1)
initialTargetVectors <- matrix(runif(nInitVec*3,min=0,max=1),nrow=nInitVec,ncol=3)
for (i in 1:nInitVec){
RQfval[i,] <- caviar.obj(initialTargetVectors[i, ], r, empiricalQuantile, q.level, 1)
}
Results          <- cbind(RQfval, initialTargetVectors)
SortedResults    <- Results[order(Results[,1]),] # sort the results
BestInitialCond  <- SortedResults[1:nInitialCond,-1] # keep the top nInitialCond
est <- NULL
for (dt in 1:nInitialCond){
est[[dt]] <-  suppressWarnings(optimx::optimx(BestInitialCond[dt,],caviar.obj,r=r,empiricalQuantile=empiricalQuantile,q.level=q.level,out=1,method=c("Nelder-Mead")))
}
val <- NULL
for(j in 1:length(est)){val[j] <- est[[j]]$value }
temp <- est[which.min(val)]
coeff.CAViaR <- as.numeric(temp[[1]][1:dim(initialTargetVectors)[2]])
rq.val.CAViaR <- as.numeric(temp[[1]][4])
tmp <- caviar.obj(coeff.CAViaR,r,empiricalQuantile,q.level,2)
cond.quant.CAViaR <- tmp$VaR
if (is.plot){
plot(date,y,type='l',main=paste0("Conditional quantile(s) estimated at the quantile level: (", q.level, ")"), xlab='Months',ylab='')
lines(date,cond.quant.MIDAS,type='l',col="red")
}
return(list(coeff.CAViaR=coeff.CAViaR,rq.val.CAViaR=rq.val.CAViaR,cond.quant.CAViaR=cond.quant.CAViaR))
}
caviar.obj <- function(beta,r,empiricalQuantile,q.level,out){
# get VaR:
VaR <- EvaluateVaR(beta,r,empiricalQuantile)
# compute hit stat:
Hit <- as.numeric(r < VaR) - q.level
# compute regression quantile loss:
RQ  <- - sum(Hit*(r - VaR))
if ((RQ == Inf) || (RQ != RQ)){
RQ <- 1e+100
}
if (out == 1){
res <- RQ
} else if (out==2){
res <- list(VaR=VaR,Hit=Hit)
}
return(res)
}
EvaluateVaR <- function(beta,r,empiricalQuantile){
lVaR <- length(r)
VaR <- matrix(NA,nrow=lVaR,ncol=1)
VaR[1,] <- empiricalQuantile
# SAV CAViaR specification:
for (i in 2:lVaR){
VaR[i,] <- beta[1] + beta[2] * VaR[i - 1, ] + beta[3] * abs(r[i - 1])
}
return(as.vector(VaR))
}
y <- est.midas.0.05$y
win.size <- 40
un.quant <- matrix(NA,nrow=length(y),ncol=1)
for (j in win.size:length(y)){
un.quant[j] <- quantile(y[(j-win.size+1):j], probs = 0.05)
}
lines(est.midas.0.05$date,un.quant,type='l',col="blue")
# --- estimate CAViAR on monthly data --- #
empiricalQuantile <- un.quant[41] #take unconditional quantile to initialize VaR loop.
caviar.optimization(r,q.level,empiricalQuantile,nInitialCond=10,nInitVec=1000,is.plot=TRUE)
# --- comppute rolling window unconditional quantile --- #
y <- est.midas.0.05$y
win.size <- 40
un.quant <- matrix(NA,nrow=length(y),ncol=1)
for (j in win.size:length(y)){
un.quant[j] <- quantile(y[(j-win.size+1):j], probs = 0.05)
}
lines(est.midas.0.05$date,un.quant,type='l',col="blue")
# --- estimate CAViAR on monthly data --- #
empiricalQuantile <- un.quant[41] #take unconditional quantile to initialize VaR loop.
caviar.optimization(y,q.level,empiricalQuantile,nInitialCond=10,nInitVec=1000,is.plot=TRUE)
caviar.optimization(y,q.level=0.05,empiricalQuantile,nInitialCond=10,nInitVec=1000,is.plot=TRUE)
caviar.optimization <- function(r,date,q.level,empiricalQuantile,nInitialCond=10,nInitVec=1000,is.plot=FALSE){
RQfval <- matrix(NA,nrow=nInitVec,ncol=1)
initialTargetVectors <- matrix(runif(nInitVec*3,min=0,max=1),nrow=nInitVec,ncol=3)
for (i in 1:nInitVec){
RQfval[i,] <- caviar.obj(initialTargetVectors[i, ], r, empiricalQuantile, q.level, 1)
}
Results          <- cbind(RQfval, initialTargetVectors)
SortedResults    <- Results[order(Results[,1]),] # sort the results
BestInitialCond  <- SortedResults[1:nInitialCond,-1] # keep the top nInitialCond
est <- NULL
for (dt in 1:nInitialCond){
est[[dt]] <-  suppressWarnings(optimx::optimx(BestInitialCond[dt,],caviar.obj,r=r,empiricalQuantile=empiricalQuantile,q.level=q.level,out=1,method=c("Nelder-Mead")))
}
val <- NULL
for(j in 1:length(est)){val[j] <- est[[j]]$value }
temp <- est[which.min(val)]
coeff.CAViaR <- as.numeric(temp[[1]][1:dim(initialTargetVectors)[2]])
rq.val.CAViaR <- as.numeric(temp[[1]][4])
tmp <- caviar.obj(coeff.CAViaR,r,empiricalQuantile,q.level,2)
cond.quant.CAViaR <- tmp$VaR
if (is.plot){
plot(date,y,type='l',main=paste0("Conditional quantile(s) estimated at the quantile level: (", q.level, ")"), xlab='Months',ylab='')
lines(date,cond.quant.MIDAS,type='l',col="red")
}
return(list(coeff.CAViaR=coeff.CAViaR,rq.val.CAViaR=rq.val.CAViaR,cond.quant.CAViaR=cond.quant.CAViaR))
}
caviar.obj <- function(beta,r,empiricalQuantile,q.level,out){
# get VaR:
VaR <- EvaluateVaR(beta,r,empiricalQuantile)
# compute hit stat:
Hit <- as.numeric(r < VaR) - q.level
# compute regression quantile loss:
RQ  <- - sum(Hit*(r - VaR))
if ((RQ == Inf) || (RQ != RQ)){
RQ <- 1e+100
}
if (out == 1){
res <- RQ
} else if (out==2){
res <- list(VaR=VaR,Hit=Hit)
}
return(res)
}
EvaluateVaR <- function(beta,r,empiricalQuantile){
lVaR <- length(r)
VaR <- matrix(NA,nrow=lVaR,ncol=1)
VaR[1,] <- empiricalQuantile
# SAV CAViaR specification:
for (i in 2:lVaR){
VaR[i,] <- beta[1] + beta[2] * VaR[i - 1, ] + beta[3] * abs(r[i - 1])
}
return(as.vector(VaR))
}
caviar.optimization(y,snp500[,1],q.level=0.05,empiricalQuantile,nInitialCond=10,nInitVec=1000,is.plot=TRUE)
caviar.optimization <- function(r,date,q.level,empiricalQuantile,nInitialCond=10,nInitVec=1000,is.plot=FALSE){
RQfval <- matrix(NA,nrow=nInitVec,ncol=1)
initialTargetVectors <- matrix(runif(nInitVec*3,min=0,max=1),nrow=nInitVec,ncol=3)
for (i in 1:nInitVec){
RQfval[i,] <- caviar.obj(initialTargetVectors[i, ], r, empiricalQuantile, q.level, 1)
}
Results          <- cbind(RQfval, initialTargetVectors)
SortedResults    <- Results[order(Results[,1]),] # sort the results
BestInitialCond  <- SortedResults[1:nInitialCond,-1] # keep the top nInitialCond
est <- NULL
for (dt in 1:nInitialCond){
est[[dt]] <-  suppressWarnings(optimx::optimx(BestInitialCond[dt,],caviar.obj,r=r,empiricalQuantile=empiricalQuantile,q.level=q.level,out=1,method=c("Nelder-Mead")))
}
val <- NULL
for(j in 1:length(est)){val[j] <- est[[j]]$value }
temp <- est[which.min(val)]
coeff.CAViaR <- as.numeric(temp[[1]][1:dim(initialTargetVectors)[2]])
rq.val.CAViaR <- as.numeric(temp[[1]][4])
tmp <- caviar.obj(coeff.CAViaR,r,empiricalQuantile,q.level,2)
cond.quant.CAViaR <- tmp$VaR
if (is.plot){
plot(date[-1],y,type='l',main=paste0("Conditional quantile(s) estimated at the quantile level: (", q.level, ")"), xlab='Months',ylab='')
lines(date,cond.quant.MIDAS,type='l',col="red")
}
return(list(coeff.CAViaR=coeff.CAViaR,rq.val.CAViaR=rq.val.CAViaR,cond.quant.CAViaR=cond.quant.CAViaR))
}
caviar.obj <- function(beta,r,empiricalQuantile,q.level,out){
# get VaR:
VaR <- EvaluateVaR(beta,r,empiricalQuantile)
# compute hit stat:
Hit <- as.numeric(r < VaR) - q.level
# compute regression quantile loss:
RQ  <- - sum(Hit*(r - VaR))
if ((RQ == Inf) || (RQ != RQ)){
RQ <- 1e+100
}
if (out == 1){
res <- RQ
} else if (out==2){
res <- list(VaR=VaR,Hit=Hit)
}
return(res)
}
EvaluateVaR <- function(beta,r,empiricalQuantile){
lVaR <- length(r)
VaR <- matrix(NA,nrow=lVaR,ncol=1)
VaR[1,] <- empiricalQuantile
# SAV CAViaR specification:
for (i in 2:lVaR){
VaR[i,] <- beta[1] + beta[2] * VaR[i - 1, ] + beta[3] * abs(r[i - 1])
}
return(as.vector(VaR))
}
caviar.optimization(y,snp500[,1],q.level=0.05,empiricalQuantile,nInitialCond=10,nInitVec=1000,is.plot=TRUE)
r=y
date=snp500[,1]
q.level=0.05
nInitialCond=10
nInitVec=1000
RQfval <- matrix(NA,nrow=nInitVec,ncol=1)
initialTargetVectors <- matrix(runif(nInitVec*3,min=0,max=1),nrow=nInitVec,ncol=3)
for (i in 1:nInitVec){
RQfval[i,] <- caviar.obj(initialTargetVectors[i, ], r, empiricalQuantile, q.level, 1)
}
Results          <- cbind(RQfval, initialTargetVectors)
SortedResults    <- Results[order(Results[,1]),] # sort the results
BestInitialCond  <- SortedResults[1:nInitialCond,-1] # keep the top nInitialCond
est <- NULL
for (dt in 1:nInitialCond){
est[[dt]] <-  suppressWarnings(optimx::optimx(BestInitialCond[dt,],caviar.obj,r=r,empiricalQuantile=empiricalQuantile,q.level=q.level,out=1,method=c("Nelder-Mead")))
}
val <- NULL
for(j in 1:length(est)){val[j] <- est[[j]]$value }
temp <- est[which.min(val)]
coeff.CAViaR <- as.numeric(temp[[1]][1:dim(initialTargetVectors)[2]])
rq.val.CAViaR <- as.numeric(temp[[1]][4])
tmp <- caviar.obj(coeff.CAViaR,r,empiricalQuantile,q.level,2)
cond.quant.CAViaR <- tmp$VaR
cond.quant.CAViaR
plot(date[-1],y,type='l',main=paste0("Conditional quantile(s) estimated at the quantile level: (", q.level, ")"), xlab='Months',ylab='')
lines(date,cond.quant.MIDAS,type='l',col="red")
plot(date[-1],y[-1],type='l',main=paste0("Conditional quantile(s) estimated at the quantile level: (", q.level, ")"), xlab='Months',ylab='')
lines(date,cond.quant.MIDAS,type='l',col="red")
plot(date[-1],y[-1],type='l',main=paste0("Conditional quantile(s) estimated at the quantile level: (", q.level, ")"), xlab='Months',ylab='')
lines(date,cond.quant.CAViaR,type='l',col="red")
plot(date,r,type='l',main=paste0("Conditional quantile(s) estimated at the quantile level: (", q.level, ")"), xlab='Months',ylab='')
lines(date,cond.quant.CAViaR,type='l',col="red")
length(date)
est.midas.0.05
date <- est.midas.0.05$date
plot(date,r,type='l',main=paste0("Conditional quantile(s) estimated at the quantile level: (", q.level, ")"), xlab='Months',ylab='')
lines(date,cond.quant.CAViaR,type='l',col="red")
caviar.optimization <- function(r,date,q.level,empiricalQuantile,nInitialCond=10,nInitVec=1000,is.plot=FALSE){
RQfval <- matrix(NA,nrow=nInitVec,ncol=1)
initialTargetVectors <- matrix(runif(nInitVec*3,min=0,max=1),nrow=nInitVec,ncol=3)
for (i in 1:nInitVec){
RQfval[i,] <- caviar.obj(initialTargetVectors[i, ], r, empiricalQuantile, q.level, 1)
}
Results          <- cbind(RQfval, initialTargetVectors)
SortedResults    <- Results[order(Results[,1]),] # sort the results
BestInitialCond  <- SortedResults[1:nInitialCond,-1] # keep the top nInitialCond
est <- NULL
for (dt in 1:nInitialCond){
est[[dt]] <-  suppressWarnings(optimx::optimx(BestInitialCond[dt,],caviar.obj,r=r,empiricalQuantile=empiricalQuantile,q.level=q.level,out=1,method=c("Nelder-Mead")))
}
val <- NULL
for(j in 1:length(est)){val[j] <- est[[j]]$value }
temp <- est[which.min(val)]
coeff.CAViaR <- as.numeric(temp[[1]][1:dim(initialTargetVectors)[2]])
rq.val.CAViaR <- as.numeric(temp[[1]][4])
tmp <- caviar.obj(coeff.CAViaR,r,empiricalQuantile,q.level,2)
cond.quant.CAViaR <- tmp$VaR
if (is.plot){
plot(date,r,type='l',main=paste0("Conditional quantile(s) for quantile level: (", q.level, ")"), xlab='Months',ylab='')
lines(date,cond.quant.CAViaR,type='l',col="red")
}
return(list(coeff.CAViaR=coeff.CAViaR,rq.val.CAViaR=rq.val.CAViaR,cond.quant.CAViaR=cond.quant.CAViaR))
}
caviar.obj <- function(beta,r,empiricalQuantile,q.level,out){
# get VaR:
VaR <- EvaluateVaR(beta,r,empiricalQuantile)
# compute hit stat:
Hit <- as.numeric(r < VaR) - q.level
# compute regression quantile loss:
RQ  <- - sum(Hit*(r - VaR))
if ((RQ == Inf) || (RQ != RQ)){
RQ <- 1e+100
}
if (out == 1){
res <- RQ
} else if (out==2){
res <- list(VaR=VaR,Hit=Hit)
}
return(res)
}
EvaluateVaR <- function(beta,r,empiricalQuantile){
lVaR <- length(r)
VaR <- matrix(NA,nrow=lVaR,ncol=1)
VaR[1,] <- empiricalQuantile
# SAV CAViaR specification:
for (i in 2:lVaR){
VaR[i,] <- beta[1] + beta[2] * VaR[i - 1, ] + beta[3] * abs(r[i - 1])
}
return(as.vector(VaR))
}
caviar.optimization(y,date,q.level=0.05,empiricalQuantile,nInitialCond=10,nInitVec=1000,is.plot=TRUE)
caviar.optimization(y,date,q.level=0.05,empiricalQuantile,nInitialCond=10,nInitVec=1000,is.plot=FALSE)
caviar.optimization(y,date,q.level=0.25,empiricalQuantile,nInitialCond=10,nInitVec=1000,is.plot=TRUE)
caviar.optimization(y,date,q.level=0.05,empiricalQuantile,nInitialCond=10,nInitVec=1000,is.plot=TRUE)
caviar.optimization(y,date,q.level=0.05,empiricalQuantile,nInitialCond=100,nInitVec=20000,is.plot=TRUE)
# Chapter 4. MIDAS quantile
# --- preliminaries --- #
rm(list=ls())
require("MIDASLec")
# --- MIDAS quantile regressions --- #
# --- load data --- #
data("example4")
# --- options --- #
optionsmidas <- list(aggrY = 22, aggrX = 22) # forecast horizon, no. of lags of daily returns
# --- compute log returns --- #
snp500[-1, 2] <- log(snp500[-1, 2]/snp500[-dim(snp500)[1], 2])
snp500 <- snp500[-1,]
# --- estimate MIDAS quantile regression with beta (restricted) and plot quantiles --- #
est.midas.0.25 <- midas.optimization.rq(snp500[,2],snp500[,1],optionsmidas,"betaconstr",q.level=0.25,nInitialCond=10,is.plot=TRUE)
est.midas.0.05 <- midas.optimization.rq(snp500[,2],snp500[,1],optionsmidas,"betaconstr",q.level=0.05,nInitialCond=10,is.plot=TRUE)
# --- comppute rolling window unconditional quantile --- #
y <- est.midas.0.05$y
win.size <- 40
un.quant <- matrix(NA,nrow=length(y),ncol=1)
for (j in win.size:length(y)){
un.quant[j] <- quantile(y[(j-win.size+1):j], probs = 0.05)
}
lines(est.midas.0.05$date,un.quant,type='l',col="blue")
# --- estimate CAViAR on monthly data --- #
empiricalQuantile <- un.quant[41] #take unconditional quantile to initialize VaR loop.
date <- est.midas.0.05$date
caviar.optimization(y,date,q.level=0.05,empiricalQuantile,nInitialCond=10,nInitVec=1000,is.plot=TRUE)
remove.packages("MIDASLec")
